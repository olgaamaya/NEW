let slideIndex = 1; // Initialize globally
let mediaLoaded = {}; // Object to track if media has been loaded for each lightbox

// Function to scale menu on window resize
function scale(x) {
    const menuToggle = document.getElementById('menu-toggle');
    const anyLightboxOpen = document.querySelector("[id^='Lightbox_'][style*='display: flex']");

    if (x.matches && !anyLightboxOpen) { // Only show menu-toggle if no lightbox is open
        menuToggle.style.display = 'flex';
    } else {
        menuToggle.style.display = 'none';
    }
}

var x = window.matchMedia("(max-width: 1000px)");
scale(x); // Call listener function at runtime
x.addListener(scale); // Attach listener function on state changes 

let lastScrollPosition = 0;

// Function to dynamically load images/videos from Cloudinary for the lightbox
function loadMedia(lightboxId) {
    const lightbox = document.getElementById(`Lightbox_${lightboxId}`);
    const mediaContainer = lightbox.querySelector(".modal-content");

    if (!mediaContainer) return;

    if (mediaLoaded[lightboxId]) {
        console.log(`Media for Lightbox ${lightboxId} already loaded. Skipping fetch.`);
        return;
    }

    const folderName = `lightbox_${lightboxId}`;
    const isMobile = window.matchMedia("(max-width: 1000px)").matches;

    // Fetch the media for the lightbox, including both images and videos
    fetch(`https://new-vhym.onrender.com/api/get-cloudinary-media?folder=${folderName}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(mediaFiles => {
            console.log("Fetched media files:", mediaFiles);
            displayMediaFiles(mediaFiles, lightboxId, isMobile);
            mediaLoaded[lightboxId] = true; // Mark media as loaded
        })
        .catch(err => console.error("Error loading media:", err));
}

// Function to display media (images/videos) in the lightbox
function displayMediaFiles(mediaFiles, lightboxId, isMobile) {
    const mediaContainer = document.getElementById(`Lightbox_${lightboxId}`).querySelector(".modal-content");

    // Store existing video slides before clearing
    const existingSlides = {};
    document.querySelectorAll(`.slide${lightboxId}`).forEach(slide => {
        const video = slide.querySelector(".slidevideo");
        if (video) {
            existingSlides[slide.dataset.index] = video; // Store video with its index
        }
    });

    // Clear only images inside mediaContainer but keep existing video slides
    mediaContainer.innerHTML = "";

    mediaFiles.forEach((media, index) => {
        let div = document.createElement("div");
        div.classList.add("slide", `slide${lightboxId}`);
        div.dataset.index = index;

        // Check if media is a video (MP4)
        if (media.src.endsWith(".mp4")) {
            let video = document.createElement("video");
            video.className = "slidevideo";
            video.controls = true;
            video.loop = true;
            video.muted = false;
            video.preload = "metadata"; // Prevent unnecessary buffering
            video.innerHTML = `<source src="${media.src}" type="video/mp4">Your browser does not support the video tag.`;
            div.appendChild(video);
        } else {
            let img = document.createElement("img");

            // Dynamically adjust image size based on the device (mobile/desktop)
            const imageUrl = isMobile ?
                media.src.replace("/upload/", "/upload/c_fill,w_600/") // Resize for mobile (600px wide)
                :
                media.src.replace("/upload/", "/upload/c_fill,w_1200/"); // Resize for desktop (1200px wide)

            img.src = imageUrl;
            img.className = "image-slide";
            img.loading = index < 3 ? "eager" : "lazy";

            // Assign alt text from Cloudinary metadata or use a fallback
            img.alt = media.alt || `Lightbox Image ${index + 1}`;

            div.appendChild(img);
        }

        mediaContainer.appendChild(div);
    });

    showSlide(lightboxId, 1);
}

// Function to open the lightbox
function openLightbox(lightboxId) {
    lastScrollPosition = window.scrollY || window.pageYOffset;
    loadMedia(lightboxId);

    document.querySelectorAll("[id^='Lightbox_']").forEach(lightbox => {
        if (lightbox.id !== `Lightbox_${lightboxId}`) {
            lightbox.style.display = "none";
        }
    });

    document.getElementById(`Lightbox_${lightboxId}`).style.display = "flex";
    document.body.style.overflow = "hidden";
    scale(x);

    let lastSlide = localStorage.getItem(`lastSlide_${lightboxId}`);
    if (lastSlide) {
        toSlide(lightboxId, parseInt(lastSlide));
    } else {
        toSlide(lightboxId, 1);
    }
}

// Function to store the last viewed slide
function storeLastSlide(lightboxId, slideIndex) {
    localStorage.setItem(`lastSlide_${lightboxId}`, slideIndex);
}

// Function to change slides
function toSlide(lightboxId, slideIndex) {
    showSlide(lightboxId, slideIndex);
    storeLastSlide(lightboxId, slideIndex);
}

// Function to change slides
function changeSlide(NR, n) {
    slideIndex += n;
    let slides = document.getElementsByClassName(`slide${NR}`);

    if (slideIndex < 1) {
        slideIndex = slides.length;
    } else if (slideIndex > slides.length) {
        slideIndex = 1;
    }

    showSlide(NR, slideIndex);
    document.dispatchEvent(new Event("slideChange"));
}

// Function to show a specific slide
function showSlide(slideGroup, e) {
    let slides = document.getElementsByClassName(`slide${slideGroup}`);
    if (e > slides.length) slideIndex = 1;
    else if (e < 1) slideIndex = slides.length;
    else slideIndex = e;

    for (let n = 0; n < slides.length; n++) {
        slides[n].style.display = "none";
    }

    if (slides.length === 1) {
        slides[0].style.display = "flex";
    } else {
        if (slides[slideIndex - 1]) {
            slides[slideIndex - 1].style.display = "flex";
        }
    }

    storeLastSlide(slideGroup, slideIndex);
}

document.addEventListener("DOMContentLoaded", function() {
    function preloadVisibleSlides() {
        document.querySelectorAll(".active-slide img.image-slide, .next-slide img.image-slide, .previous-slide img.image-slide")
            .forEach(img => img.loading = "eager");
    }

    function lazyLoadOthers() {
        document.querySelectorAll("img.image-slide").forEach(img => {
            if (!img.loading) img.loading = "lazy";
        });

        document.querySelectorAll("video.slidevideo").forEach(video => {
            if (video.preload !== "auto") video.preload = "none";
        });
    }

    preloadVisibleSlides();
    lazyLoadOthers();
    document.addEventListener("slideChange", preloadVisibleSlides);
});

// Function to close the lightbox
function closeLightbox(lightboxId) {
    document.getElementById(`Lightbox_${lightboxId}`).style.display = "none";
    pauseVideo(lightboxId);

    document.body.style.overflow = "";
    window.scrollTo({ top: lastScrollPosition, behavior: "smooth" });
    window.onkeydown = null;
    scale(x);
}

function pauseVideo(lightboxId) {
    document.querySelectorAll(`#Lightbox_${lightboxId} video`).forEach(video => {
        video.pause();
        video.currentTime = 0;
    });
}

function setKeys(slideGroup) {
    window.onkeydown = function(e) {
        if (e.keyCode === 37) {
            toSlide(slideGroup, slideIndex - 1);
        } else if (e.keyCode === 39) {
            toSlide(slideGroup, slideIndex + 1);
        }
    };
}