// Preload the first set of media for each lightbox on page load
function preloadInitialMedia() {
    // Get all lightboxes on the page
    const lightboxes = document.querySelectorAll('[id^="Lightbox_"]');

    lightboxes.forEach(lightbox => {
        // Extract the lightbox number from the ID (e.g., Lightbox_1 => 1)
        const lightboxId = lightbox.id.replace('Lightbox_', '');

        // Check if media has already been loaded for this lightbox (to prevent multiple requests)
        if (!mediaLoaded[lightboxId]) {
            const folderName = `lightbox_${lightboxId}`;
            const isMobile = window.matchMedia("(max-width: 1000px)").matches;

            // Fetch the first set of media (e.g., first 3 items) from Cloudinary
            fetch(`https://new-vhym.onrender.com/api/get-cloudinary-media?folder=${folderName}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(mediaFiles => {
                    // Preload only the first few items (e.g., first 3 images or videos)
                    const mediaToPreload = mediaFiles.slice(0, 3);
                    mediaToPreload.forEach((media, index) => {
                        if (media.type === "video") {
                            const video = document.createElement("video");
                            video.src = media.src;
                            video.preload = "auto"; // Preload video
                            video.style.display = "none"; // Hide video since we're just preloading
                            document.body.appendChild(video); // Append to the body to trigger preload
                        } else {
                            const img = document.createElement("img");
                            img.src = media.src;
                            img.loading = "eager"; // Preload image eagerly
                            img.style.display = "none"; // Hide image since we're just preloading
                            document.body.appendChild(img); // Append to the body to trigger preload
                        }
                    });

                    // Mark media as loaded for this lightbox to prevent fetching again
                    mediaLoaded[lightboxId] = true;
                })
                .catch(err => console.error(`Error preloading media for Lightbox ${lightboxId}:`, err));
        }
    });
}

// Call the preload function when the DOM is ready
document.addEventListener("DOMContentLoaded", function() {
    preloadInitialMedia(); // Preload media for all lightboxes when the page loads
});


let slideIndex = 1; // Initialize globally
let mediaLoaded = {}; // Object to track if media has been loaded for each lightbox

// Function to scale menu on window resize
function scale(x) {
    const menuToggle = document.getElementById('menu-toggle');
    const anyLightboxOpen = document.querySelector("[id^='Lightbox_'][style*='display: flex']");

    if (x.matches && !anyLightboxOpen) { // Only show menu-toggle if no lightbox is open
        menuToggle.style.display = 'flex';
    } else {
        menuToggle.style.display = 'none';
    }
}

var x = window.matchMedia("(max-width: 1000px)");
scale(x); // Call listener function at runtime
x.addListener(scale); // Attach listener function on state changes 

let lastScrollPosition = 0;

function loadMedia(lightboxId) {
    const lightbox = document.getElementById(`Lightbox_${lightboxId}`);
    const mediaContainer = lightbox.querySelector(".modal-content");

    if (!mediaContainer) return;

    if (mediaLoaded[lightboxId]) {
        console.log(`Media for Lightbox ${lightboxId} already loaded. Skipping fetch.`);
        return;
    }

    // Ensure exact lightboxId is used to construct the folder name
    const folderName = `lightbox_${lightboxId}`;
    console.log(`Fetching media for folder: ${folderName}`); // Log the folder name
    const isMobile = window.matchMedia("(max-width: 1000px)").matches;

    fetch(`https://new-vhym.onrender.com/api/get-cloudinary-media?folder=${folderName}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(mediaFiles => {
            console.log("Fetched media files:", mediaFiles);
            displayMediaFiles(mediaFiles, lightboxId, isMobile);
            mediaLoaded[lightboxId] = true; // Mark media as loaded
        })
        .catch(err => console.error("Error loading media:", err));
}

function displayMediaFiles(mediaFiles, lightboxId, isMobile) {
    const mediaContainer = document.getElementById(`Lightbox_${lightboxId}`).querySelector(".modal-content");

    // Ensure existing content is not removed
    mediaFiles.forEach((media, index) => {
        let div = document.createElement("div");
        div.classList.add("slide", `slide${lightboxId}`);

        if (media.type === "video") {
            let video = document.createElement("video");
            video.className = "videoslide";
            video.src = media.src;
            video.controls = true;
            video.preload = index < 3 ? "auto" : "none";
            div.appendChild(video);
        } else {
            let img = document.createElement("img");

            // Use the transformed URL returned from the server (no further transformations needed)
            img.src = media.src;
            img.className = "image-slide";
            img.loading = index < 3 ? "eager" : "lazy"; // Lazy loading for images after the first few
            img.alt = media.alt || `Lightbox Image ${index + 1}`;

            div.appendChild(img);
        }

        mediaContainer.appendChild(div);
    });

    showSlide(lightboxId, 1);
}

// Function to open the lightbox
function openLightbox(lightboxId) {
    lastScrollPosition = window.scrollY || window.pageYOffset;
    loadMedia(lightboxId); // Only fetch media for the exact lightbox

    document.querySelectorAll("[id^='Lightbox_']").forEach(lightbox => {
        if (lightbox.id !== `Lightbox_${lightboxId}`) {
            lightbox.style.display = "none";
        }
    });

    document.getElementById(`Lightbox_${lightboxId}`).style.display = "flex";
    document.getElementById(`projecttitle_${lightboxId}`).style.display = "block";
    document.getElementById("mouseTarget").style.display = "none";
    document.body.style.overflow = "hidden";
    document.getElementById("rowid").style.display = "none";
    document.getElementById("menu-toggle").style.display = "none";
    document.querySelector("footer").style.display = "none";
    document.getElementById("social_elements2").style.display = "none";

    setKeys(lightboxId);
    scale(x);

    let lastSlide = localStorage.getItem(`lastSlide_${lightboxId}`);
    if (lastSlide) {
        toSlide(lightboxId, parseInt(lastSlide));
    } else {
        toSlide(lightboxId, 1);
    }
}

// Function to store the last viewed slide
function storeLastSlide(lightboxId, slideIndex) {
    localStorage.setItem(`lastSlide_${lightboxId}`, slideIndex);
}

// Function to change slides
function toSlide(lightboxId, slideIndex) {
    showSlide(lightboxId, slideIndex);
    storeLastSlide(lightboxId, slideIndex);
}

// Function to change slides
function changeSlide(NR, n) {
    slideIndex += n;
    let slides = document.getElementsByClassName(`slide${NR}`);

    if (slideIndex < 1) {
        slideIndex = slides.length;
    } else if (slideIndex > slides.length) {
        slideIndex = 1;
    }

    showSlide(NR, slideIndex);
    document.dispatchEvent(new Event("slideChange"));
}

// Function to show a specific slide
function showSlide(slideGroup, e) {
    let slides = document.getElementsByClassName(`slide${slideGroup}`);
    if (e > slides.length) slideIndex = 1;
    else if (e < 1) slideIndex = slides.length;
    else slideIndex = e;

    for (let n = 0; n < slides.length; n++) {
        slides[n].style.display = "none";
        slides[n].classList.remove("active-slide", "previous-slide", "next-slide");
    }

    // If only one slide is present, set it as active-slide only
    if (slides.length === 1) {
        slides[0].style.display = "flex";
        slides[0].classList.add("active-slide");
    } else {
        if (slides[slideIndex - 1]) {
            slides[slideIndex - 1].style.display = "flex";
            slides[slideIndex - 1].classList.add("active-slide");
        }

        let prevIndex = slideIndex - 2 >= 0 ? slideIndex - 2 : slides.length - 1;
        if (slides[prevIndex]) {
            slides[prevIndex].style.display = "flex";
            slides[prevIndex].classList.add("previous-slide");
        }

        let nextIndex = slideIndex < slides.length ? slideIndex : 0;
        if (slides[nextIndex]) {
            slides[nextIndex].style.display = "flex";
            slides[nextIndex].classList.add("next-slide");
        }
    }

    storeLastSlide(slideGroup, slideIndex);
}

document.addEventListener("DOMContentLoaded", function() {
    function preloadVisibleSlides() {
        document.querySelectorAll(".active-slide img.image-slide, .next-slide img.image-slide, .previous-slide img.image-slide")
            .forEach(img => img.loading = "eager");
    }

    function lazyLoadOthers() {
        document.querySelectorAll("img.image-slide").forEach(img => {
            if (!img.loading) img.loading = "lazy";
        });

        document.querySelectorAll("video.videofront").forEach(video => {
            if (video.preload !== "auto") video.preload = "none";
        });
    }

    preloadVisibleSlides();
    lazyLoadOthers();
    document.addEventListener("slideChange", preloadVisibleSlides);
});

// Function to get the highest lightbox number
function getHighestLightboxNumber() {
    const lightboxes = document.querySelectorAll('[id^="Lightbox_"]');
    let highest = 0;
    lightboxes.forEach(lightbox => {
        const id = lightbox.id;
        const number = parseInt(id.replace('Lightbox_', ''));
        if (number > highest) highest = number;
    });
    return highest;
}

// Function to set up pointer interaction
function setupPointer() {
    const Xmax = getHighestLightboxNumber();
    const pointerElement = document.getElementById("before-pointer");

    pointerElement.onclick = function() {
        openLightbox(Xmax);
        showSlide(Xmax, 1);
    };
}

window.onload = setupPointer;

function closeLightbox(lightboxId) {
    document.getElementById(`Lightbox_${lightboxId}`).style.display = "none";
    pauseVideo(lightboxId);

    document.getElementById(`projecttitle_${lightboxId}`).style.display = "none";
    document.getElementById("mouseTarget").style.display = "flex";
    document.body.style.overflow = "";
    document.getElementById("rowid").style.display = "grid";
    document.querySelector("footer").style.display = "flex";
    document.getElementById("social_elements2").style.display = "";

    window.scrollTo({ top: lastScrollPosition, behavior: "smooth" });
    window.onkeydown = null;
    scale(x);
}

function pauseVideo(lightboxId) {
    document.querySelectorAll(`#Lightbox_${lightboxId} video`).forEach(video => {
        video.pause();
        video.currentTime = 0;
    });
}

function setKeys(lightboxId) {
    window.onkeydown = function(e) {
        const key = e.key || e.code;

        if (key === "Escape") {
            closeLightbox(lightboxId);
        } else if (key === "ArrowRight") {
            changeSlide(lightboxId, 1);
        } else if (key === "ArrowLeft") {
            changeSlide(lightboxId, -1);
        }
    };
}
//scriptend