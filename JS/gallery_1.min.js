let slideIndex = 1; // Initialize globally
let mediaLoaded = {}; // Object to track if media has been loaded for each lightbox

document.addEventListener("DOMContentLoaded", function() {
    preloadFirstMediaForAllLightboxes(); // Preload first media of each lightbox on page load
    setupPointer();
    preloadVisibleSlides();
    lazyLoadOthers();
    document.addEventListener("slideChange", preloadVisibleSlides);
});

// Function to preload the first media file for each lightbox
function preloadFirstMediaForAllLightboxes() {
    const lightboxIds = getAllLightboxIds(); // Get all lightbox IDs dynamically

    lightboxIds.forEach(lightboxId => {
        const folderName = `lightbox_${lightboxId}`;

        fetch(`https://new-vhym.onrender.com/api/get-cloudinary-media?folder=${folderName}&limit=1`)
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                return response.json();
            })
            .then(mediaFiles => {
                if (mediaFiles.length > 0) {
                    preloadMedia(mediaFiles[0], lightboxId);
                }
            })
            .catch(err => console.error(`Error preloading media for Lightbox ${lightboxId}:`, err));
    });
}

// Function to extract all lightbox IDs from the page dynamically
function getAllLightboxIds() {
    return Array.from(document.querySelectorAll('[id^="Lightbox_"]'))
        .map(el => el.id.replace('Lightbox_', ''));
}

// Function to preload a single media file (image/video)
function preloadMedia(media, lightboxId) {
    if (!media || !media.src) return;

    let preloadElement;

    if (media.type === "video") {
        preloadElement = document.createElement("video");
        preloadElement.src = media.src;
        preloadElement.preload = "auto";
        preloadElement.style.display = "none";
    } else {
        preloadElement = document.createElement("img");
        let imageUrl = media.src.includes('f_auto') ? media.src : media.src.replace('/upload/', '/upload/f_auto,');
        preloadElement.src = imageUrl;
        preloadElement.loading = "eager";
        preloadElement.style.display = "none";
    }

    document.body.appendChild(preloadElement); // Attach to body (not visible, just for preloading)
}

// Function to scale menu on window resize
function scale(x) {
    const menuToggle = document.getElementById('menu-toggle');
    const anyLightboxOpen = document.querySelector("[id^='Lightbox_'][style*='display: flex']");

    if (x.matches && !anyLightboxOpen) { // Only show menu-toggle if no lightbox is open
        menuToggle.style.display = 'flex';
    } else {
        menuToggle.style.display = 'none';
    }
}

var x = window.matchMedia("(max-width: 1000px)");
scale(x); // Call listener function at runtime
x.addListener(scale); // Attach listener function on state changes 

let lastScrollPosition = 0;

function loadMedia(lightboxId) {
    const lightbox = document.getElementById(`Lightbox_${lightboxId}`);
    const mediaContainer = lightbox.querySelector(".modal-content");

    if (!mediaContainer) return;

    if (mediaLoaded[lightboxId]) {
        console.log(`Media for Lightbox ${lightboxId} already loaded. Skipping fetch.`);
        return;
    }

    // Ensure exact lightboxId is used to construct the folder name
    const folderName = `lightbox_${lightboxId}`;
    console.log(`Fetching media for folder: ${folderName}`);
    const isMobile = window.matchMedia("(max-width: 1000px)").matches;

    fetch(`https://new-vhym.onrender.com/api/get-cloudinary-media?folder=${folderName}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(mediaFiles => {
            console.log("Fetched media files:", mediaFiles);
            displayMediaFiles(mediaFiles, lightboxId, isMobile);
            mediaLoaded[lightboxId] = true;
        })
        .catch(err => console.error("Error loading media:", err));
}

function displayMediaFiles(mediaFiles, lightboxId, isMobile) {
    const mediaContainer = document.getElementById(`Lightbox_${lightboxId}`).querySelector(".modal-content");

    mediaFiles.forEach((media, index) => {
        let div = document.createElement("div");
        div.classList.add("slide", `slide${lightboxId}`);

        if (media.type === "video") {
            let video = document.createElement("video");
            video.className = "videoslide";
            video.src = media.src;
            video.controls = true;
            video.preload = index < 3 ? "auto" : "none";
            div.appendChild(video);
        } else {
            let img = document.createElement("img");

            let imageUrl = media.src.includes('f_auto') ? media.src : media.src.replace('/upload/', '/upload/f_auto,');
            img.src = imageUrl;
            img.className = "image-slide";
            img.loading = index < 3 ? "eager" : "lazy";
            img.alt = media.alt || `Lightbox Image ${index + 1}`;

            div.appendChild(img);
        }

        mediaContainer.appendChild(div);
    });

    showSlide(lightboxId, 1);
}

function openLightbox(lightboxId) {
    lastScrollPosition = window.scrollY || window.pageYOffset;
    loadMedia(lightboxId);

    document.querySelectorAll("[id^='Lightbox_']").forEach(lightbox => {
        if (lightbox.id !== `Lightbox_${lightboxId}`) {
            lightbox.style.display = "none";
        }
    });

    document.getElementById(`Lightbox_${lightboxId}`).style.display = "flex";
    document.getElementById(`projecttitle_${lightboxId}`).style.display = "block";
    document.getElementById("mouseTarget").style.display = "none";
    document.body.style.overflow = "hidden";
    document.getElementById("rowid").style.display = "none";
    document.getElementById("menu-toggle").style.display = "none";
    document.querySelector("footer").style.display = "none";
    document.getElementById("social_elements2").style.display = "none";

    setKeys(lightboxId);
    scale(x);

    let lastSlide = localStorage.getItem(`lastSlide_${lightboxId}`);
    if (lastSlide) {
        toSlide(lightboxId, parseInt(lastSlide));
    } else {
        toSlide(lightboxId, 1);
    }
}

function closeLightbox(lightboxId) {
    document.getElementById(`Lightbox_${lightboxId}`).style.display = "none";
    pauseVideo(lightboxId);

    document.getElementById(`projecttitle_${lightboxId}`).style.display = "none";
    document.getElementById("mouseTarget").style.display = "flex";
    document.body.style.overflow = "";
    document.getElementById("rowid").style.display = "grid";
    document.querySelector("footer").style.display = "flex";
    document.getElementById("social_elements2").style.display = "";

    window.scrollTo({ top: lastScrollPosition, behavior: "smooth" });
    window.onkeydown = null;
    scale(x);
}

function pauseVideo(lightboxId) {
    document.querySelectorAll(`#Lightbox_${lightboxId} video`).forEach(video => {
        video.pause();
        video.currentTime = 0;
    });
}

function setKeys(lightboxId) {
    window.onkeydown = function(e) {
        const key = e.key || e.code;

        if (key === "Escape") {
            closeLightbox(lightboxId);
        } else if (key === "ArrowRight") {
            changeSlide(lightboxId, 1);
        } else if (key === "ArrowLeft") {
            changeSlide(lightboxId, -1);
        }
    };
}
//scriptend